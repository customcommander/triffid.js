(function (T) {

function Wait(fn, delay, context) {
    this.fn      = fn;
    this.delay   = delay;
    this.context = contex;
}

T.Wait = Wait;

T.wait = function (fn, delay, context) {
    throw new Wait(fn, delay, context);
};

function WaitFor(cond, repeat, fn, context) {
    this.cond    = cond;
    this.repeat  = repeat || 50;
    this.fn      = fn || function () {};
    this.context = context || window;
}

T.WaitFor = WaitFor;

T.waitFor = function (cond, repeat, fn, context) {
    throw new WaitFor(cond, repeat, fn, context);
};

function Job(name, fn, context) {
    this.exec = function () {
        fn.apply(context);
    };
}

Job.prototype = {

    time_start: 0,

    time_end: 0,

    start: function () {
        this.time_start = ( new Date() ).getTime();
    },

    end: function () {
        this.time_end = ( new Date() ).getTime();
    },

    run: function (queue) {

        this.start();

        try {
            this.exec();
        } catch (e) {
            if (e instanceof Wait) {

                setTimeout((function (job) {
                    return function () {

                        try {
                            e.fn.apply(e.context);
                        } catch (e) {
                            job.message = e.message;
                        }

                        job.end();
                        queue.next();
                    };
                }(this)), e.delay);

            } else if (e instanceof WaitFor) {

                (function (job){

                    var timer = setInterval((function (job) {
                        return function () {
                            if (e.cond()) {

                                clearInterval(timer);

                                try {
                                    e.fn.apply(e.context);
                                } catch (e) {
                                    job.message = e.message;
                                }

                                job.end();
                                queue.next();
                            }
                        };
                    }(job)), e.repeat);

                })(this);

            } else {
                this.message = e.message;
            }
        }

        this.end();
        queue.next();
    }
};

T.Job = Job;

function Queue() {
    this.jobs = [];
}

Queue.prototype = {

    empty: false,

    add: function (name, fn, context) {
        this.jobs.push( new Job(name, fn, context) );
        return this;
    },

    next: function () {
        this.run();
    },

    run: function () {

        var job = this.jobs.shift();

        if (!job) {
            this.empty = true;
            return;
        }

        job.run(this);
    }
};

T.Queue = Queue;

T.Assert = {
    isTrue: function (expected, message) {
        if (expected !== true) {
            throw new Error(message);
        }
    }
};

function TestCase(obj) {
    this.name  = obj.name;
    this.obj   = obj;
    this.queue = new Queue();
}

TestCase.prototype = {

    wait: function (fn, delay) {
        T.wait(fn, delay, this);
    },

    waitFor: function (cond, repeat, fn) {
        T.waitFor(cond, repeat, fn, this);
    },

    run: function () {

        var key;

        for (key in this.obj) {
            if (typeof this.obj[key] === 'function') {
                this.queue.add(key, this.obj[key], this);
            }
        }

        this.queue.run();
    },

    isFinished: function () {
        return this.queue.empty;
    }
};

T.TestCase = TestCase;

function TestSuite(name) {
    this.name      = name;
    this.testcases = [];
    this.queue     = new Queue();
}

TestSuite.prototype = {

    add: function (obj) {
        this.testcases.push( new TestCase(obj) );
        return this;
    },

    run: function () {
        var i;
        var testcase;

        for (i=0; i<this.testcases.length; i++) {

            testcase = this.testcases[i];

            this.queue.add(testcase.name, function () {
                this.run();
                T.waitFor((function (testcase) {
                    return function () {
                        return testcase.isFinished();
                    };
                }(this)));
            }, testcase);
        }

        this.queue.run();
    },

    isFinished: function () {
        return this.queue.empty;
    }
};

T.TestSuite = TestSuite;

function TestRunner() {
    this.testsuites = [];
    this.queue = new Queue();
}

TestRunner.prototype = {

    suite: function (name) {
        var testsuite = new TestSuite(name);
        this.testsuites.push(testsuite);
        return testsuite;
    },

    run: function () {

        var i,
            testsuite;

        for (i=0; i<this.testsuites.length; i++) {

            testsuite = this.testsuites[i];

            this.queue.add(testsuite.name, function () {
                this.run();
                T.waitFor((function (testsuite) {
                    return function () {
                        return testsuite.isFinished();
                    };
                }(this)));
            }, testsuite);
        }

        this.queue.run();
    },

    isFinished: function () {
        return this.queue.empty;
    }
};

T.TestRunner = TestRunner;

T.testrunner = new TestRunner();

T.suite = function (name) {
    return T.testrunner.suite(name);
};

T.run = function () {
    T.testrunner.run();
};


})(function () {
    window.Triffid = {};
    return window.Triffid;
}());